
class SmartArray {
	
	private int[] IntString;
	private int nElems=0;
	
	public SmartArray(int M[])
	{
		nElems=M.length;
		IntString=new int[M.length+1];
		int i;
		System.arraycopy(M, 0, IntString,0, nElems);
	/*	for(i=0;i<nElems;i++)
		{
			IntString[i]=M[i];
		}*/
	}
	
	public void ShowSmartArray()
	{
		int i;
		for(i=0;i<nElems;i++)
		{ System.out.printf("%d,",IntString[i]);} System.out.println();
	}
	
	public int GetNumarElemente()
	{ return nElems;}

	
	public void Add(int element)
	{
		IntString[nElems]=element;
		nElems++;
	}
	
	private void MoveToLeft(int i)
	{
		for(;i<(nElems-1);i++)
		{
			IntString[i]=IntString[i+1];
		}
		nElems--;
	}
	
	public void Delete(int element)
	{
		int i;
		for(i=0;i<nElems;i++)
		{
			if(IntString[i]==element)
			{
				MoveToLeft(i);
			}
		}
	}
	
	public void Pairs()
	{
		int i,j;
		for(i=0;i<nElems;i++)
		{
			for(j=0;j<nElems;j++)
				if(IntString[i]+IntString[j]==0)
					System.out.printf("{%d,%d} ; ", IntString[i],IntString[j]);
					
		}
		System.out.println();
	}
	
	private class BackTrack(int k)
	{
		
	}
	
	public void ZeroSum()
	{
		int n;
		int[] stiva=new int[nElems];
		if(nElems<2) return; 
		for(n=2;n<nElems;n++)
		{
			BackTrack(1);
		}
	}
	
	
}
